package rolez.lang

import rolez.io.InputStream
import rolez.io.PrintStream

class Object mapped to java.lang.Object {
    mapped def readonly equals(other: readonly Object): boolean
    mapped def readonly hashCode: int
    mapped def readonly toString: readonly String
}

class Slice[T] mapped to rolez.lang.Slice {
    mapped val range: readonly SliceRange
    
    mapped def pure arrayLength: int
    mapped def r get[r includes readonly](index: int): T with r
    mapped def readwrite set(index: int, component: T):
    
    mapped def r slice[r](sliceRange: pure SliceRange): r Slice[T]
    mapped def r slice[r](begin: int, end: int, step: int): r Slice[T]
    mapped def r slice[r](begin: int, end: int): r Slice[T]
    mapped def r partition[r](p: pure Partitioner, n: int): readwrite Array[r Slice[T]]
}

class Array[T] mapped to rolez.lang.Array extends Slice[T] {
    mapped val length: int
    mapped new(length: int)
    
    mapped def r clone[r includes readonly]: r Array[T]
}

pure class SliceRange mapped to rolez.lang.SliceRange {
    mapped val begin: int
    mapped val end: int
    mapped val step: int
    
    mapped new(begin: int, end: int, step: int)
    
    mapped def pure size: int
    mapped def pure isEmpty: boolean
    mapped def pure covers(other: pure SliceRange): boolean
    mapped def pure intersectWith(other: pure SliceRange): readonly SliceRange
}

pure class Vector[T] mapped to rolez.lang.Vector {
    mapped val length: int
    mapped def pure get(i: int): T
}

class VectorBuilder[T] mapped to rolez.lang.VectorBuilder {
    mapped new(length: int)
    mapped def readonly get(index: int): T
    mapped def readwrite set(index: int, component: T): readwrite VectorBuilder[T]
    mapped def readonly build: readonly Vector[T]
}

pure class String mapped to java.lang.String {
    mapped new(chars: readonly Array[char])
    
    mapped def pure length: int
    mapped def pure charAt(position: int): char
    mapped def pure trim: readonly String
    
    mapped def pure split(regex: pure String): readwrite Array[pure String]
}

class Task[V] mapped to rolez.lang.Task {
    mapped def pure get: V
}

object System mapped to java.lang.System {
    mapped val  in: readonly InputStream
    mapped val out: readonly PrintStream
    mapped val err: readonly PrintStream
    
    mapped def readonly exit(code: int):
}

object Math mapped to java.lang.Math {
    mapped val E: double
    mapped val PI: double
    
    mapped def pure sin(a: double): double
    mapped def pure cos(a: double): double
    mapped def pure tan(a: double): double
    mapped def pure asin(a: double): double
    mapped def pure acos(a: double): double
    mapped def pure atan(a: double): double
    
    mapped def pure toDegrees(angrad: double): double
    mapped def pure toRadians(angdeg: double): double
    
    mapped def pure exp(a: double): double
    mapped def pure log(a: double): double
    mapped def pure log10(a: double): double
    
    mapped def pure sqrt(a: double): double
    mapped def pure cbrt(a: double): double
    mapped def pure pow(a: double, b: double): double
    
    mapped def pure ceil(a: double): double
    mapped def pure floor(a: double): double
    
    mapped def pure abs(a: double): double
    mapped def pure abs(a: int): int
    
    mapped def pure max(a: double, b: double): double
    mapped def pure min(a: double, b: double): double
    mapped def pure max(a: int, b: int): int
    mapped def pure min(a: int, b: int): int
    
    mapped def pure signum(d: double): double
}

object MathExtra {
    // TODO: Move this to Math once non-mapped methods are supported for mapped singletons
    
    def pure log2(i: int): int {
        if(i < 1) return -1;
        else return 31 - the Int.numberOfLeadingZeros(i);
    }
}