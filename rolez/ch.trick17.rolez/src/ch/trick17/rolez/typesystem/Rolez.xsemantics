import ch.trick17.rolez.RolezExtensions
import ch.trick17.rolez.RolezUtils
import ch.trick17.rolez.generic.ParameterizedMethod
import ch.trick17.rolez.rolez.Argumented
import ch.trick17.rolez.rolez.ArithmeticBinaryExpr
import ch.trick17.rolez.rolez.Assignment
import ch.trick17.rolez.rolez.Block
import ch.trick17.rolez.rolez.BooleanLiteral
import ch.trick17.rolez.rolez.BuiltInRole
import ch.trick17.rolez.rolez.Cast
import ch.trick17.rolez.rolez.CharLiteral
import ch.trick17.rolez.rolez.ClassRef
import ch.trick17.rolez.rolez.Constr
import ch.trick17.rolez.rolez.DoubleLiteral
import ch.trick17.rolez.rolez.EqualityExpr
import ch.trick17.rolez.rolez.Executable
import ch.trick17.rolez.rolez.Expr
import ch.trick17.rolez.rolez.ExprStmt
import ch.trick17.rolez.rolez.ForLoop
import ch.trick17.rolez.rolez.GenericClassRef
import ch.trick17.rolez.rolez.IfStmt
import ch.trick17.rolez.rolez.IntLiteral
import ch.trick17.rolez.rolez.LocalVar
import ch.trick17.rolez.rolez.LocalVarDecl
import ch.trick17.rolez.rolez.LogicalExpr
import ch.trick17.rolez.rolez.MemberAccess
import ch.trick17.rolez.rolez.Method
import ch.trick17.rolez.rolez.New
import ch.trick17.rolez.rolez.Null
import ch.trick17.rolez.rolez.NullLiteral
import ch.trick17.rolez.rolez.NumericType
import ch.trick17.rolez.rolez.OpArithmetic
import ch.trick17.rolez.rolez.OpAssignment
import ch.trick17.rolez.rolez.Param
import ch.trick17.rolez.rolez.Parenthesized
import ch.trick17.rolez.rolez.PrimitiveType
import ch.trick17.rolez.rolez.Pure
import ch.trick17.rolez.rolez.ReadOnly
import ch.trick17.rolez.rolez.ReadWrite
import ch.trick17.rolez.rolez.ReferenceType
import ch.trick17.rolez.rolez.RelationalExpr
import ch.trick17.rolez.rolez.ReturnExpr
import ch.trick17.rolez.rolez.ReturnNothing
import ch.trick17.rolez.rolez.Role
import ch.trick17.rolez.rolez.RoleParam
import ch.trick17.rolez.rolez.RoleParamRef
import ch.trick17.rolez.rolez.RoleType
import ch.trick17.rolez.rolez.RolezFactory
import ch.trick17.rolez.rolez.SimpleClassRef
import ch.trick17.rolez.rolez.Stmt
import ch.trick17.rolez.rolez.StringLiteral
import ch.trick17.rolez.rolez.SuperConstrCall
import ch.trick17.rolez.rolez.The
import ch.trick17.rolez.rolez.This
import ch.trick17.rolez.rolez.Type
import ch.trick17.rolez.rolez.TypeParamRef
import ch.trick17.rolez.rolez.TypedExecutable
import ch.trick17.rolez.rolez.UnaryMinus
import ch.trick17.rolez.rolez.UnaryNot
import ch.trick17.rolez.rolez.Var
import ch.trick17.rolez.rolez.VarKind
import ch.trick17.rolez.rolez.VarRef
import ch.trick17.rolez.rolez.WhileLoop
import ch.trick17.rolez.validation.AbstractRolezValidator
import it.xsemantics.runtime.RuleEnvironment
import java.util.HashMap
import java.util.Map

import static ch.trick17.rolez.Constants.*
import static ch.trick17.rolez.RolezUtils.*
import static ch.trick17.rolez.rolez.RolezPackage.Literals.*

import static extension ch.trick17.rolez.RolezExtensions.*

system ch.trick17.rolez.typesystem.RolezSystem

validatorExtends AbstractRolezValidator

inject RolezUtils utils
inject extension RolezFactory _
inject extension RolezExtensions __

auxiliary {
    leastCommonSuperrole(Role r1, Role r2): Role
    inferRoleArgs(RuleEnvironment G, MemberAccess a, Method m): Map<RoleParam, Role>
}

judgments {
    type      |- Expr e : output Type
    varType   ||- Var v : output Type
    // IMPROVE: Enable type inference for fields too (introduce VarLike class?)
    wellTyped |- Stmt s
    
    validArgs |- Argumented a << Executable e
    
    subtypeExpr |- Expr left <| Type right
        error "Type mismatch: " + type(createEnv(left), left).value + " is not a subtype of " + right
        source left
    
    subtype  |-     Type left <:     Type right error "subtype" // Apparently, an error message is necessary for sensible error message selection
    subrole  |-     Role left <!     Role right error "subrole"
    subclass |- ClassRef left <~ ClassRef right error "subclass"
    
    equalType |- Type left ~~ Type right error "equal type"
    equalRole |~ Role left ~~ Role right error "equal role"
    
    assignable |= Expr e
        error "Cannot assign to this expression" source e
}

auxiliary leastCommonSuperrole(Role r1, Role r2) {
    if(subroleSucceeded(r1, r2))
        r2
    else if(subroleSucceeded(r2, r1))
        r1
    else
        createPure
}

auxiliary inferRoleArgs(RuleEnvironment G, MemberAccess a, Method m) {
    if(!a.roleArgs.isEmpty)
        return a.roleArgs.toMap[m.roleParams.get(roleArgIndex)];
    
    val roleArgs = new HashMap<RoleParam, Role>
    val thisRole = m.thisRole
    if(thisRole instanceof RoleParamRef) {
        G |- a.target : var RoleType targetType
        roleArgs.put(thisRole.param, targetType.role)
    }
    for(var i = 0; i< m.params.size; i++) {
        val paramType = m.params.get(i).type
        if(paramType instanceof RoleType) {
            val paramRole = paramType.role
            if(paramRole instanceof RoleParamRef) {
                G |- a.args.get(i) : var RoleType argType
                roleArgs.put(paramRole.param,
                    leastCommonSuperrole(roleArgs.get(paramRole.param) ?: argType.role, argType.role))
            }
        }
    }
    roleArgs
}

rule TAssignment
    G |- Assignment a : Type t
from {
    G |- a.left : var Type leftType
    G |= a.left
    
    if(a.op == OpAssignment.ASSIGN) {
        G |- a.right <| leftType
    }
    else {
        G |- a.right : var Type rightType
        {
            a.op == OpAssignment.OR_ASSIGN || a.op == OpAssignment.AND_ASSIGN
            G |- leftType <: createBoolean
            G |- rightType <: createBoolean
        } or {
            a.op == OpAssignment.PLUS_ASSIGN || a.op == OpAssignment.MINUS_ASSIGN
                || a.op == OpAssignment.TIMES_ASSIGN || a.op == OpAssignment.DIVIDED_BY_ASSIGN
                || a.op == OpAssignment.MODULO_ASSIGN
            {
                G |- leftType  <: createInt
                G |- rightType <: createInt
            } or {
                G |- leftType  <: createDouble
                G |- rightType <: createInt or G |- rightType <: createDouble
            }
        } or {
            a.op == OpAssignment.PLUS_ASSIGN
            val stringType = newRoleType(createReadOnly, newClassRef(utils.findClass(stringClassName, a)))
            
            G |- leftType <: stringType
        } or fail
            error "The operator " + a.op + " is undefined for the argument types "
                + leftType + ", " + rightType
            source a
    }
    
    t = leftType
}

rule TLogicalExpr
    G |- LogicalExpr e : createBoolean
from {
    G |- e.left  <| createBoolean
    G |- e.right <| createBoolean
}

rule TEqualityExpr
    G |- EqualityExpr e : createBoolean
from {
    G |- e.left  : var Type leftType
    G |- e.right : var Type rightType
    
    G |- leftType <: rightType
        or G |- rightType <: leftType
        or fail
            error "Cannot compare " + leftType + " to " + rightType
            source e
}

rule TRelationalExpr
    G |- RelationalExpr e : createBoolean
from {
    G |- e.left  : var Type leftType
    G |- e.right : var Type rightType
    
    {
        G |- leftType  <: createInt or G |- leftType  <: createDouble
        G |- rightType <: createInt or G |- rightType <: createDouble
    } or {
        G |- leftType  <: createChar
        G |- rightType <: createChar
    } or fail
        error "Cannot compare " + leftType + " to " + rightType
        source e
}

rule TArithmeticBinaryExpr
    G |- ArithmeticBinaryExpr e : Type t
from {
    G |- e.left  : var Type leftType
    G |- e.right : var Type rightType
    
    {
        G |- leftType  <: createInt
        G |- rightType <: createInt
        t = createInt
    } or {
        G |- leftType  <: createInt or G |- leftType  <: createDouble
        G |- rightType <: createInt or G |- rightType <: createDouble
        t = createDouble
    } or {
        e.op == OpArithmetic.PLUS
        val stringType = newRoleType(createReadOnly, newClassRef(utils.findClass(stringClassName, e)))
        
        G |- leftType <: stringType or G |- rightType <: stringType
        t = stringType
    } or fail
        error "The operator " + e.op + " is undefined for the argument types "
            + leftType + ", " + rightType
        source e
}

rule TCast
    G |- Cast c : Type t
from {
    G |- c.expr : var Type exprType
    
    G |- exprType <: c.type // Upcasts are always fine
    or {
        // Downcasts only allowed if role stays the same and if there is a subclass relation
        c.type instanceof RoleType && exprType instanceof RoleType
        G |~ (exprType as RoleType).role ~~ (c.type as RoleType).role
        G |- (c.type as RoleType).base <~ (exprType as RoleType).base
    }
    or {
        c.type instanceof NumericType && exprType instanceof NumericType
    } or fail
        error "Cannot cast " + exprType + " to " + c.type
        source c
    
    t = c.type
}

rule TUnaryMinus
    G |- UnaryMinus m : Type t
from {
    G |- m.expr : var Type exprType
    {
        G |- exprType <: createInt
        t = createInt
    } or {
        G |- exprType <: createDouble
        t = createDouble
    } or fail
        error "The unary operator - is undefined for the argument type " + exprType
        source m
}

rule TUnaryNot
    G |- UnaryNot n : createBoolean
from {
    G |- n.expr <| createBoolean
}

rule TMemberAccess
    G |- MemberAccess a : Type t
    error taskClassName + " class is not defined" source a
from {
    G |- a.target : var RoleType targetType
    
    val targetRole = targetType.role
    if(a.isFieldAccess) {
        val requiredRole = if(a.field.kind == VarKind.VAL) createPure else createReadOnly
        G |- targetRole <! requiredRole or fail
            error "Role mismatch: Cannot access this field with a " + targetRole + " target"
            source a.target
        var fieldType = a.field.type
        t = switch(fieldType) {
            RoleType: {
                val role = leastCommonSuperrole(targetRole, fieldType.role)
                newRoleType(role, fieldType.base)
            }
            default: fieldType
        }
    }
    else { // method invoke/task start
        // Check if args are well-typed
        for(arg : a.args) {
            G |- arg : var Type _
        }
        // Check if role args respect bounds of role params
        val originalMethod =
            if(a.method instanceof ParameterizedMethod) (a.method as ParameterizedMethod).genericEObject
            else a.method
        val roleArgs = inferRoleArgs(G, a, originalMethod)
        for(entry : roleArgs.entrySet) {
            G |- entry.value <! entry.key.upperBound or fail
                error "Bound mismatch: the role " + entry.value + " is not a valid substitute "
                    + "for the bounded role parameter " + entry.key
                source a
                feature MEMBER_ACCESS__MEMBER
        }
        G |- targetRole <! a.method.thisRole or fail
            error "Role mismatch: Cannot " + (if(a.isTaskStart) "start task " else "call method ")
                + a.method + " with a " + targetRole + " target"
            source a
        
        if(a.isTaskStart) {
            val taskClass = utils.findNormalClass(taskClassName, a)
            taskClass != null
            t = newRoleType(createPure, newClassRef(taskClass, a.method.type))
        }
        else
            t = a.method.type
    }
}

rule TThis
    G |- This t : Type type
    error "Cannot refer to \"this\" in this context" source t
from {
    type = env(G, "this", RoleType)
}

rule TVarRef
    G |- VarRef r : Type t
from {
    G ||- r.variable : t
}

rule TNew
    G |- New n : newRoleType(createReadWrite, n.classRef)
from {
    for(arg : n.args) {
        G |- arg : var Type _
    }
}

axiom TThe
    G |- The t : newRoleType(createReadOnly, t.classRef)

rule TParenthesized
    G |- Parenthesized p : Type t
from {
    G |- p.expr : t
}

rule TStringLiteral
    G |- StringLiteral s : Type t
    error stringClassName + " class is not defined" source s
from {
    val stringClass = utils.findClass(stringClassName, s)
    stringClass != null
    t = newRoleType(createReadWrite, newClassRef(stringClass))
}

axiom TNullLiteral
    G |- NullLiteral __ : createNull

axiom TIntLiteral
    G |- IntLiteral __ : createInt

axiom TDoubleLiteral
    G |- DoubleLiteral __ : createDouble

axiom TBooleanLiteral
    G |- BooleanLiteral __ : createBoolean

axiom TCharLiteral
    G |- CharLiteral __ : createChar

axiom VParam
    G ||- Param p : p.type

rule VLocalVar
    G ||- LocalVar v : Type t
    error "Missing variable type" source v
from {
    {
        v.type != null
        t = v.type
    } or {
        v.decl.initializer != null
        G |- v.decl.initializer : t
    }
}

rule WBlock
    G |- Block b
from {
    // No need to check blocks, as all stmts are checked individually anyway
    // for(s : b.stmts) {
    //     G |- s
    // }
}

rule WLocalVarDecl
    G |- LocalVarDecl d
from {
    G ||- d.variable : var Type _
    d.initializer == null
        or d.variable.type == null
        or G |- d.initializer <| d.variable.type
}

rule WIfStmt
    G |- IfStmt ifStmt
from {
    G |- ifStmt.^condition <| createBoolean
    G |- ifStmt.thenPart
    ifStmt.elsePart == null or G |- ifStmt.elsePart
}

rule WWhileLoop
    G |- WhileLoop l
from {
    G |- l.^condition <| createBoolean
    G |- l.body
}

rule WForLoop
    G |- ForLoop l
from {
    G |- l.initializer
    G |- l.^condition <| createBoolean
    G |- l.step : var Type _
    G |- l.body
}

rule WSuperConstrCall
    G |- SuperConstrCall c
from {
    for(arg : c.args) {
        G |- arg : var Type _
    }
}

axiom WReturnNothing
    G |- ReturnNothing _

rule WReturnExpr
    G |- ReturnExpr r
from {
    // Apparently, this needs to be in braces:...
    {r.enclosingExecutable instanceof TypedExecutable} or fail
        error "Cannot return an expression in a constructor"
        source r
    
    G |- r.expr <| (r.enclosingExecutable as TypedExecutable).type
}

rule WExprStmt
    G |- ExprStmt s
from {
    G |- s.expr : var Type _
}


rule ValidArgs
    G |- Argumented a << Executable e
from {
    a.args.size >= e.params.size
        or fail error "Too few arguments" source a
    a.args.size == e.params.size
        or fail error "Too many arguments" source a
    
    val i = a.args.iterator
    for(t : e.params.map[type]) {
        G |- i.next <| t
    }
}


rule SubtypeExpr
    G |- Expr left <| Type right
from {
    G |- left : var Type leftType
    G |- leftType <: right
}


rule SubtypePrimitiveTypes
    G |- PrimitiveType left <: PrimitiveType right
from {
    left.class == right.class
}

rule SubtypeRoleTypes
    G |- RoleType left <: RoleType right
from {
    G |- left.role <! right.role // Subrole
    G |- left.base <~ right.base // Subclass
}

axiom SubtypeNull
    G |- Null __ <: ReferenceType ___

rule SubtypeTypeVarRef
    G |- TypeParamRef left <: TypeParamRef right
from {
    left.param === right.param
}

rule SubtypeGeneral
    G |- Type left <: Type right
from { fail }


rule SubroleBuiltInRole
    G |- BuiltInRole left <! BuiltInRole right
from {
    left instanceof ReadWrite || right instanceof Pure
        || left instanceof ReadOnly && right instanceof ReadOnly
}

rule SubroleRoleParamRef
    G |- RoleParamRef left <! RoleParamRef right
from {
    left.param === right.param
}

rule SubroleRoleParamRefBuiltInRole
    G |- RoleParamRef left <! BuiltInRole right
from {
    G |- left.param.upperBound <! right
}

rule SubRoleBuiltInRoleRoleParamRef
    G |- BuiltInRole left <! RoleParamRef right
from {
    left instanceof ReadWrite
}

rule SubroleGeneral
    G |- Role left <! Role right
from { fail }

rule SubclassSimple
    G |- ClassRef left <~ SimpleClassRef right
from {
    left.clazz === right.clazz || utils.strictSuperclasses(left.clazz).contains(right.clazz)
}

rule SubclassGeneric
    G |- GenericClassRef left <~ GenericClassRef right
from {
    left.clazz.qualifiedName == right.clazz.qualifiedName || utils.strictSuperclasses(left.clazz).contains(right.clazz)
    G |- left.typeArg ~~ right.typeArg
}

rule SubclassGeneral
    G |- ClassRef left <~ ClassRef right
from { fail }

rule EqualTypePrimitiveTypes
    G |- PrimitiveType left ~~ PrimitiveType right
from {
    left.class === right.class
}

rule EqualTypeRoleTypes
    G |- RoleType left ~~ RoleType right
from {
    G |~ left.role ~~ right.role
    left.base.clazz.qualifiedName == right.base.clazz.qualifiedName
    left.base instanceof GenericClassRef == right.base instanceof GenericClassRef
    
    left.base instanceof SimpleClassRef
        or G |- (left.base as GenericClassRef).typeArg ~~ (right.base as GenericClassRef).typeArg
}

axiom EqualTypeNull
    G |- Null left ~~ Null right

rule EqualTypeTypeVarRef
    G |- TypeParamRef left ~~ TypeParamRef right
from {
    left.param == right.param
}

rule EqualTypeGeneral
    G |- Type left ~~ Type right
from { fail }


rule EqualRole
    G |~ Role left ~~ Role right
from {
    left.class == right.class
}


rule AVarRef
    G |= VarRef r
    error "Cannot assign to a value" source r
from {
    r.variable.kind == VarKind.VAR
}

rule AMemberAccess
    G |= MemberAccess a
from {
    a.isFieldAccess
    a.field.kind == VarKind.VAR
        or a.target instanceof This && a.enclosingExecutable instanceof Constr
        or fail error "Cannot assign to a value field" source a
    
    G |- a.target : var RoleType type
    G |- type.role <! createReadWrite
        or fail error "Cannot assign to field of " + type.role + " object" source a
}

rule AExpr
    G |= Expr __
from { fail }


checkrule CheckStmt for
    Stmt s // Checked for all stmts individually, to get multiple error markers
from {
    createEnv(s) |- s
}