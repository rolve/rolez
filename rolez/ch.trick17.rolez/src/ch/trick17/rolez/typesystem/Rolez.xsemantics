import ch.trick17.rolez.RolezExtensions
import ch.trick17.rolez.RolezUtils
import ch.trick17.rolez.rolez.Argumented
import ch.trick17.rolez.rolez.ArithmeticBinaryExpr
import ch.trick17.rolez.rolez.Assignment
import ch.trick17.rolez.rolez.Block
import ch.trick17.rolez.rolez.BooleanLiteral
import ch.trick17.rolez.rolez.Cast
import ch.trick17.rolez.rolez.CharLiteral
import ch.trick17.rolez.rolez.ClassRef
import ch.trick17.rolez.rolez.Constr
import ch.trick17.rolez.rolez.DoubleLiteral
import ch.trick17.rolez.rolez.EqualityExpr
import ch.trick17.rolez.rolez.Expr
import ch.trick17.rolez.rolez.ExprStmt
import ch.trick17.rolez.rolez.GenericClassRef
import ch.trick17.rolez.rolez.IfStmt
import ch.trick17.rolez.rolez.IntLiteral
import ch.trick17.rolez.rolez.LocalVar
import ch.trick17.rolez.rolez.LocalVarDecl
import ch.trick17.rolez.rolez.LogicalExpr
import ch.trick17.rolez.rolez.MemberAccess
import ch.trick17.rolez.rolez.Method
import ch.trick17.rolez.rolez.New
import ch.trick17.rolez.rolez.Null
import ch.trick17.rolez.rolez.NullLiteral
import ch.trick17.rolez.rolez.OpArithmetic
import ch.trick17.rolez.rolez.Param
import ch.trick17.rolez.rolez.ParameterizedBody
import ch.trick17.rolez.rolez.Parenthesized
import ch.trick17.rolez.rolez.PrimitiveType
import ch.trick17.rolez.rolez.Pure
import ch.trick17.rolez.rolez.ReadOnly
import ch.trick17.rolez.rolez.ReadWrite
import ch.trick17.rolez.rolez.ReferenceType
import ch.trick17.rolez.rolez.RelationalExpr
import ch.trick17.rolez.rolez.ReturnExpr
import ch.trick17.rolez.rolez.ReturnNothing
import ch.trick17.rolez.rolez.Role
import ch.trick17.rolez.rolez.RoleType
import ch.trick17.rolez.rolez.RolezFactory
import ch.trick17.rolez.rolez.SimpleClassRef
import ch.trick17.rolez.rolez.Start
import ch.trick17.rolez.rolez.Stmt
import ch.trick17.rolez.rolez.StringLiteral
import ch.trick17.rolez.rolez.SuperConstrCall
import ch.trick17.rolez.rolez.Task
import ch.trick17.rolez.rolez.The
import ch.trick17.rolez.rolez.This
import ch.trick17.rolez.rolez.Type
import ch.trick17.rolez.rolez.TypeParamRef
import ch.trick17.rolez.rolez.TypedBody
import ch.trick17.rolez.rolez.UnaryMinus
import ch.trick17.rolez.rolez.UnaryNot
import ch.trick17.rolez.rolez.Var
import ch.trick17.rolez.rolez.VarKind
import ch.trick17.rolez.rolez.VarRef
import ch.trick17.rolez.rolez.WhileLoop
import ch.trick17.rolez.validation.AbstractRolezValidator

import static ch.trick17.rolez.Constants.*

import static extension org.eclipse.emf.ecore.util.EcoreUtil.copy

system ch.trick17.rolez.typesystem.RolezSystem

validatorExtends AbstractRolezValidator

inject extension RolezFactory _
inject extension RolezExtensions __
inject extension RolezUtils ___

auxiliary {
    leastCommonSuperrole(Role r1, Role r2): Role
}

judgments {
    type      |- Expr e : output Type
    varType   ||- Var v : output Type
    wellTyped |- Stmt s
    
    validArgs |- Argumented a << ParameterizedBody p
    
    subtypeExpr |- Expr left <| Type right
        error "Type mismatch: " + left.type.value?.string + " is not a subtype of " + right.string
        source left
        // TODO: left.type could need an environment. Convert to explicit
        // failure once issue code are supported:
        // https://github.com/LorenzoBettini/xsemantics/issues/58
    
    subtype  |- Type  left <: Type  right error "subtype" // Apparently, an error message is necessary for sensible error message selection
    subrole  |- Role  left <! Role  right error "subrole"
    subclass |- ClassRef left <~ ClassRef right error "subclass"
    
    equalType |- Type left ~~ Type right error "equal type"
    equalRole |~ Role left ~~ Role right error "equal role"
    
    assignable |= Expr e
        error "Cannot assign to " + e.string source e
}

auxiliary leastCommonSuperrole(Role r1, Role r2) {
    if(subroleSucceeded(r1, r2)) r2 else r1
}

rule TAssignment
    G |- Assignment a : Type t
from {
    G |- a.left : var Type leftType
    G |= a.left
    G |- a.right <| leftType
    t = leftType
}

rule TLogicalExpr
    G |- LogicalExpr e : createBoolean
from {
    G |- e.left  <| createBoolean
    G |- e.right <| createBoolean
}

rule TEqualityExpr
    G |- EqualityExpr e : createBoolean
from {
    G |- e.left  : var Type leftType
    G |- e.right : var Type rightType
    
    G |- leftType <: rightType
        or G |- rightType <: leftType
        or fail
            error "Cannot compare " + leftType.string + " to " + rightType.string
            source e
}

rule TRelationalExpr
    G |- RelationalExpr e : createBoolean
from {
    G |- e.left  : var Type leftType
    G |- e.right : var Type rightType
    
    {
        G |- leftType  <: createInt
        G |- rightType <: createInt
    } or {
        G |- leftType  <: createChar
        G |- rightType <: createChar
    } or fail
        error "Cannot compare " + leftType.string + " to " + rightType.string
        source e
}

rule TArithmeticBinaryExpr
    G |- ArithmeticBinaryExpr e : Type t
from {
    G |- e.left  : var Type leftType
    G |- e.right : var Type rightType
    
    {
        G |- leftType  <: createInt
        G |- rightType <: createInt
        t = createInt
    } or {
        e.op == OpArithmetic.PLUS;
        val stringType = newRoleType(createReadOnly, newClassRef(findClass(stringClassName, e)))
        
        G |- leftType <: stringType or G |- rightType <: stringType
        t = stringType
    } or fail
        error "The operator + is undefined for the argument types "
            + leftType.string + ", " + rightType.string
        source e
}

rule TCast
    G |- Cast c : Type t
from {
    G |- c.expr : var Type exprType
    
    G |- exprType <: c.type // Upcasts are always fine
    or {
        // Downcasts only allowed if role stays the same and of there is a subclass relation
        c.type instanceof RoleType && exprType instanceof RoleType
        G |~ (exprType as RoleType).role ~~ (c.type as RoleType).role
        G |- (c.type as RoleType).base <~ (exprType as RoleType).base
    } or fail
        error "Cannot cast " + exprType.string + " to " + c.type.string
        source c
    
    t = c.type
    // TODO: Allow coercion of primitive types?
}

rule TUnaryMinus
    G |- UnaryMinus m : createInt
from {
    G |- m.expr <| createInt
}

rule TUnaryNot
    G |- UnaryNot n : createBoolean
from {
    G |- n.expr <| createBoolean
}

rule TMemberAccess
    G |- MemberAccess a : Type t
from {
    G |- a.target : var Type targetType
    if(targetType instanceof RoleType) {
        if(a.isFieldAccess) {
            G |- targetType.role <! createReadOnly or fail
                error "Role mismatch: Cannot access field of a "
                    + targetType.role.string + " target"
                source a.target
            var fieldType = a.field.type
            t = switch(fieldType) {
                RoleType: {
                    val role = leastCommonSuperrole(targetType.role, fieldType.role)
                    newRoleType(role.copy, fieldType.base.copy)
                }
                default: fieldType
            }
        }
        else { // method invoke
            // First, check if args are well-typed
            for(arg : a.args) {
                G |- arg : var Type _
            }
            G |- targetType.role <! a.method.thisRole or fail
                error "Role mismatch: Cannot call method " + a.method.string
                    +" on a " + targetType.role.string + " target"
                source a
            t = a.method.type
        }
    }
    else {
        fail
        error "Illegal target type for member access: " + targetType.string
        source a.target
    }
}

rule TThis
    G |- This t : Type type
    error "Cannot refer to \"this\" in this context" source t
from {
    type = env(G, "this", RoleType)
}

rule TVarRef
    G |- VarRef r : Type t
from {
    G ||- r.variable : t
}

rule TNew
    G |- New n : newRoleType(createReadWrite, n.classRef.copy)
from {
    for(arg : n.args) {
        G |- arg : var Type _
    }
}

axiom TThe
    G |- The t : newRoleType(createReadOnly, t.classRef.copy)

rule TStart
    G |- Start s : Type t
    error taskClassName + " class is not defined" source s
from {
    val taskClass = findNormalClass(taskClassName, s)
    taskClass != null
    G |- s << s.taskRef.task
    t = newRoleType(createPure, newClassRef(taskClass, s.taskRef.task.type.copy))
}

rule TParenthesized
    G |- Parenthesized p : Type t
from {
    G |- p.expr : t
}

rule TStringLiteral
    G |- StringLiteral s : Type t
    error stringClassName + " class is not defined" source s
from {
    val stringClass = findClass(stringClassName, s)
    stringClass != null
    t = newRoleType(createReadWrite, newClassRef(stringClass))
}

axiom TNullLiteral
    G |- NullLiteral __ : createNull

axiom TIntLiteral
    G |- IntLiteral __ : createInt

axiom TDoubleLiteral
    G |- DoubleLiteral __ : createDouble

axiom TBooleanLiteral
    G |- BooleanLiteral __ : createBoolean

axiom TCharLiteral
    G |- CharLiteral __ : createChar

axiom VParam
    G ||- Param p : p.type

rule VLocalVar
    G ||- LocalVar v : Type t
    error "Missing variable type" source v
from {
    {
        v.type != null
        t = v.type
    } or {
        v.decl.initializer != null
        G |- v.decl.initializer : t
    }
}

rule WBlock
    G |- Block b
from {
    // No need to check blocks, as all stmts are checked individually anyway
    // for(s : b.stmts) {
    //     G |- s
    // }
}

rule WLocalVarDecl
    G |- LocalVarDecl d
from {
    G ||- d.variable : var Type _
    d.initializer == null
        or d.variable.type == null
        or G |- d.initializer <| d.variable.type
}

rule WIfStmt
    G |- IfStmt ifStmt
from {
    G |- ifStmt.^condition <| createBoolean
    G |- ifStmt.thenPart
    G |- ifStmt.elsePart
}

rule WWhileLoop
    G |- WhileLoop l
from {
    G |- l.^condition <| createBoolean
    G |- l.body
}

rule WSuperConstrCall
    G |- SuperConstrCall c
from {
    for(arg : c.args) {
        G |- arg : var Type _
    }
}

axiom WReturnNothing
    G |- ReturnNothing _

rule WReturnExpr
    G |- ReturnExpr r
from {
    // Apparently, this needs to be in braces:...
    {r.enclosingBody instanceof TypedBody} or fail
        error "Cannot return an expression in a constructor"
        source r
    
    G |- r.expr <| (r.enclosingBody as TypedBody).type
}

rule WExprStmt
    G |- ExprStmt s
from {
    G |- s.expr : var Type t
}


rule ValidArgs
    G |- Argumented a << ParameterizedBody p
from {
    a.args.size >= p.params.size
        or fail error "Too few arguments" source a
    a.args.size == p.params.size
        or fail error "Too many arguments" source a
    
    val i = a.args.iterator
    for(t : p.params.map[type]) {
        G |- i.next <| t
    }
}


rule SubtypeExpr
    G |- Expr left <| Type right
from {
    G |- left : var Type leftType
    G |- leftType <: right
}


rule SubtypePrimitiveTypes
    G |- PrimitiveType left <: PrimitiveType right
from {
    left.class == right.class
}

rule SubtypeRoleTypes
    G |- RoleType left <: RoleType right
from {
    G |- left.role <! right.role // Subrole
    G |- left.base <~ right.base // Subclass
}

axiom SubtypeNull
    G |- Null __ <: ReferenceType ___

rule SubtypeTypeVarRef
    G |- TypeParamRef left <: TypeParamRef right
from {
    left.param == right.param
}

rule SubtypeGeneral
    G |- Type left <: Type right
from { fail }


rule Subrole
    G |- Role left <! Role right
from {
    left instanceof ReadWrite || right instanceof Pure
        || left instanceof ReadOnly && right instanceof ReadOnly
}


rule SubclassSimple
    G |- ClassRef left <~ SimpleClassRef right
from {
    left.clazz == right.clazz || strictSuperclasses(left.clazz).contains(right.clazz)
}

rule SubclassGeneric
    G |- GenericClassRef left <~ GenericClassRef right
from {
    left.clazz == right.clazz || strictSuperclasses(left.clazz).contains(right.clazz)
    G |- left.typeArg ~~ right.typeArg
}

rule SubclassGeneral
    G |- ClassRef left <~ ClassRef right
from { fail }

rule EqualTypePrimitiveTypes
    G |- PrimitiveType left ~~ PrimitiveType right
from {
    left.class == right.class
}

rule EqualTypeRoleTypes
    G |- RoleType left ~~ RoleType right
from {
    G |~ left.role ~~ right.role
    left.base.clazz == right.base.clazz // Is this correct?
    left.base instanceof GenericClassRef == right.base instanceof GenericClassRef
    
    left.base instanceof SimpleClassRef
        or G |- (left.base as GenericClassRef).typeArg ~~ (right.base as GenericClassRef).typeArg
}

axiom EqualTypeNull
    G |- Null left ~~ Null right

rule EqualTypeTypeVarRef
    G |- TypeParamRef left ~~ TypeParamRef right
from {
    left.param == right.param
}

rule EqualTypeGeneral
    G |- Type left ~~ Type right
from { fail }


rule EqualRole
    G |~ Role left ~~ Role right
from {
    left.class == right.class
}


rule AVarRef
    G |= VarRef r
    error "Cannot assign to a value" source r
from {
    r.variable.kind == VarKind.VAR
}

rule AMemberAccess
    G |= MemberAccess a
from {
    a.isFieldAccess
    a.field.kind == VarKind.VAR
        or a.target instanceof This && a.enclosingBody instanceof Constr
        or fail error "Cannot assign to a value field" source a
    
    G |- a.target : var RoleType type
    G |- type.role <! createReadWrite
        or fail error "Cannot assign to field of " + type.role + " object" source a
}

rule AExpr
    G |= Expr __
from { fail }


checkrule CheckStmt for
    Stmt s // Checked for all stmts individually, to get multiple error markers
from {
    val body = s.enclosingBody
    switch(body) {
        Method: {
            val thisType = newRoleType(body.thisRole.copy, newClassRef(s.enclosingClass))
            "this" <- thisType |- s
        }
        Constr: {
            val thisType = newRoleType(createReadWrite, newClassRef(s.enclosingClass))
            "this" <- thisType |- s
        }
        Task: {
            empty |- s
        }
    }
}