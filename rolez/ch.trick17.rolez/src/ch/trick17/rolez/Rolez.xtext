grammar ch.trick17.rolez.Rolez with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT, DOCUMENTATION)

import "http://www.eclipse.org/emf/2002/Ecore"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

import "http://trick17.ch/rolez/Rolez"

Program:
    ('package' name=QualifiedName)?
    imports+=Import*
    classes+=Class+;

Import:
    'import' importedNamespace=QualifiedNameWithWildCard;

QualifiedName:
    ID ('.' ID)*;

QualifiedNameWithWildCard:
    QualifiedName '.*'?;

Class:
    NormalClass | SingletonClass;

NormalClass:
    (pure?='pure')? 'class' name=QualifiedName ('[' typeParam=TypeParam ']')? WithMappedClass WithSuperclass ('{'
        (constrs+=Constr | unslicedMembers+=Member | slices+=Slice)*
    '}')?;

// TODO: Understand mapped classes better. E.g., transitions do not work for guarded objects
// to which only mapped objects have a reference.

SingletonClass:
    'object' name=QualifiedName WithMappedClass WithSuperclass ('{'
        unslicedMembers+=Member*
    '}')?;

// FIXME: Singleton classes must not extend classes with no no-args constructor!
// TODO : Or even better, allow singleton classes to specify args to super constr: object Black extends Color(0, 0, 0)

TypeParam: name=ID;

Slice:
    'slice' name=ID '{'
        members+=Member*
    '}';

Member:
    Field | Method;

Constr:
    {Constr} jvmConstr=[jvmTypes::JvmConstructor|Mapped]? 'new' WithParams WithBody?;

Field:
    jvmField=[jvmTypes::JvmField|Mapped]? kind=VarKind name=ID WithType ('=' initializer=FieldInitializer)?;

enum VarKind:
    VAL='val' | VAR='var';

FieldInitializer: code=Expr;


Method:
    jvmMethod=[jvmTypes::JvmOperation|Mapped]?
    ((declaredAsync?='async'? 'def') | declaredTask?='task' | superMethod=[Method|Override]) thisParam=ThisParam name=MethodName
    ('[' (roleParams+=RoleParam (',' roleParams+=RoleParam)*)? ']')?
    WithParams
    WithType
    WithBody?;

ThisParam: type=ThisType;

ThisType returns RoleType: role=Role;

Mapped: 'mapped';

Override: 'override';

MethodName: ID | 'main' | 'slice';

RoleParam:
    name=ID ('includes' upperBound=BuiltInRole)?; // IMPROVE: Allow role parameter refs as upper bounds

Param:
    name=ID ':' type=Type;

Block:
    {Block} '{' (stmts+=Stmt)* '}';

Stmt:
    Block | LocalVarDecl | IfStmt | WhileLoop | ForLoop | SuperConstrCall | Return | ExprStmt;

LocalVarDecl:
    variable=LocalVar ('=' initializer=Expr)? ';';

LocalVar:
    kind=VarKind name=ID (WithType)?;

IfStmt:
    'if' '(' condition=Expr ')' thenPart=Stmt
    (=>'else' elsePart=Stmt)?;

WhileLoop:
    'while' '(' condition=Expr ')' body=Stmt;

ForLoop:
    'for' '(' initializer=LocalVarDecl condition=Expr ';' step=Expr ')' body=Stmt;

// IMPROVE: for-each and maybe parallel for-each

SuperConstrCall:
    {SuperConstrCall} constr=[Constr|SuperKeyword] '(' args+=Expr (',' args+=Expr)* ')' ';';
    // Note that parentheses are required here. A "super" without parentheses is an expression.

SuperKeyword: 'super';

Return:
    ReturnNothing | ReturnExpr;

ReturnNothing:
    {ReturnNothing} 'return' ';';

ReturnExpr:
    'return' expr=Expr ';';

ExprStmt:
    expr=Expr ';';

Expr:
    Assignment;

Assignment returns Expr:
    OrExpr ({Assignment.left=current} op=OpAssignment right=Expr)?;

enum OpAssignment:
    ASSIGN='=' | OR_ASSIGN='|=' | AND_ASSIGN='&='
    | PLUS_ASSIGN='+=' | MINUS_ASSIGN='-='
    | TIMES_ASSIGN='*=' | DIVIDED_BY_ASSIGN='/=' | MODULO_ASSIGN='%=';

// TODO: Add bitwise assignment operators

OrExpr returns Expr:
    AndExpr ({LogicalExpr.left=current} op=OpOr right=AndExpr)*;

enum OpOr returns OpLogical: OR='||';

AndExpr returns Expr:
    BitwiseOrExpr ({LogicalExpr.left=current} op=OpAnd right=BitwiseOrExpr)*;

enum OpAnd returns OpLogical: AND='&&';

BitwiseOrExpr returns Expr:
    BitwiseXorExpr ({BitwiseExpr.left=current} op=OpBitwiseOr right=BitwiseXorExpr)*;

enum OpBitwiseOr returns OpBitwise: OR='|';

BitwiseXorExpr returns Expr:
    BitwiseAndExpr ({BitwiseExpr.left=current} op=OpBitwiseXor right=BitwiseAndExpr)*;

enum OpBitwiseXor returns OpBitwise: XOR='^';

BitwiseAndExpr returns Expr:
    EqualityExpr ({BitwiseExpr.left=current} op=OpBitwiseAnd right=EqualityExpr)*;

enum OpBitwiseAnd returns OpBitwise: AND='&';

EqualityExpr returns Expr:
    RelationalExpr ({EqualityExpr.left=current} op=OpEquality right=RelationalExpr)?;

enum OpEquality: EQUALS='==' | NOT_EQUALS='!=';

RelationalExpr returns Expr:
    ShiftExpr ({RelationalExpr.left=current} op=OpRelational right=ShiftExpr)?;

enum OpRelational: SMALLER='<' | GREATER='>' | SMALLER_EQUALS='<=' | GREATER_EQUALS='>=';

ShiftExpr returns Expr: 
    AdditiveExpr ({BitwiseExpr.left=current} op=OpShift right=AdditiveExpr)*;

enum OpShift returns OpBitwise: LEFT_SHIFT='<<' | RIGHT_SHIFT='>>' |  UNSIGNED_RIGHT_SHIFT='>>>';

AdditiveExpr returns Expr:
    MultiplicativeExpr ({ArithmeticBinaryExpr.left=current} op=OpAdditive right=MultiplicativeExpr)*;

enum OpAdditive returns OpArithmetic: PLUS='+' | MINUS='-';

MultiplicativeExpr returns Expr:
    Cast ({ArithmeticBinaryExpr.left=current} op=OpMultiplicative right=Cast)*;

enum OpMultiplicative returns OpArithmetic: TIMES='*' | DIVIDED_BY='/' | MODULO='%';

Cast returns Expr:
    ArithmeticUnaryPreExpr ({Cast.expr=current} 'as' type=Type)*;

ArithmeticUnaryPreExpr returns Expr:
    LogicalNot | {ArithmeticUnaryExpr} op=OpArithmeticUnaryPre expr=LogicalNot;

enum OpArithmeticUnaryPre returns OpArithmeticUnary:
    MINUS='-' | PRE_INCREMENT='++' | PRE_DECREMENT='--';

LogicalNot returns Expr:
    BitwiseNot | {LogicalNot} '!' expr=BitwiseNot;

BitwiseNot returns Expr:
    ArithmeticUnaryPostExpr | {BitwiseNot} '~' expr=ArithmeticUnaryPostExpr;

ArithmeticUnaryPostExpr returns Expr:
    Slicing ({ArithmeticUnaryExpr.expr=current} op=OpArithmeticUnaryPost)?;

enum OpArithmeticUnaryPost returns OpArithmeticUnary: POST_INCREMENT='++' | POST_DECREMENT='--';

Slicing returns Expr:
    Start ({Slicing.target=current} 'slice' slice=[Slice])?;

/* Start and MemberAccess rules have different syntax, but both create a MemberAccess object */

Start returns Expr:
    MemberAccess (
        {MemberAccess.target=current}
        taskStart?='start' member=[Method|MethodName]
        ('[' roleArgs+=Role (',' roleArgs+=Role)*   ']')?
        ('('    (args+=Expr (','     args+=Expr)*)? ')')?
    )*;
    // IMPROVE: Allow starting tasks without "this"

MemberAccess returns Expr:
    SimpleExpr (
        {MemberAccess.target=current}
        '.' member=[Member|MethodName]
        ('[' (roleArgs+=Role (',' roleArgs+=Role)*)? forceInvoke?=']')?
        ('('     (args+=Expr (','     args+=Expr)*)? forceInvoke?=')')?
    )*;
    // IMPROVE: Allow member accesses without "this"

SimpleExpr returns Expr:
    This | Super | VarRef | New | The | Parenthesized | Literal;

This: variable=[ThisParam|ThisKeyword];

ThisKeyword: 'this';

Super: variable=[ThisParam|SuperKeyword];

VarRef:
    variable=[Var];

New:
    constr=[Constr|NewKeyword] classRef=NewClassRef WithArgs;

NewKeyword: 'new';

The:
    'the' classRef=TheClassRef;

Parenthesized: '(' expr=Expr ')';

Literal:
    DoubleLiteral | LongLiteral | IntLiteral | BooleanLiteral | CharLiteral
    | StringLiteral | {NullLiteral} 'null';

StringLiteral: value=STRING;

terminal STRING: '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"';

DoubleLiteral: value=DOUBLE;

terminal DOUBLE: INT '.' INT;

LongLiteral: value=LONG;

terminal LONG returns ELong: INT 'L';

IntLiteral: value=INT;

BooleanLiteral: value=BOOL;

BOOL returns EBoolean: 'true' | 'false';

CharLiteral: value=CHAR;

terminal CHAR returns EChar: "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") ) "'";


Type:
    ReferenceType | PrimitiveType | TypeParamRef;

ReferenceType:
    RoleType | {Null} NULL_TYPE;

PrimitiveType:
    {Double} 'double' | {Long} 'long' | {Int} 'int' | {Short} 'short' | {Byte} 'byte'
    | {Char} 'char' | {Boolean} 'boolean' | {Void} 'void'?;

TypeParamRef:
    param=[TypeParam] ('with' restrictingRole=Role)?;

RoleType:
    role=Role base=ClassRef ('\\' slice=[Slice])?;

terminal NULL_TYPE: 'Null';

Role:
    RoleParamRef | BuiltInRole;

RoleParamRef:
    param=[RoleParam];

BuiltInRole:
    {Pure} 'pure' | {ReadOnly} 'readonly' | {ReadWrite} 'readwrite';
    // TODO: Use shorter names like pure, read, and write?

ClassRef:
    SimpleClassRef | GenericClassRef;

SimpleClassRef:
    clazz=[Class|QualifiedName];

GenericClassRef:
    clazz=[NormalClass|QualifiedName] '[' typeArg=Type ']';

NewClassRef returns ClassRef:
    {SimpleClassRef} (clazz=[NormalClass] | '(' clazz=[NormalClass|QualifiedName] ')')
    | {GenericClassRef} (clazz=[NormalClass] | '(' clazz=[NormalClass|QualifiedName] ')') '[' typeArg=Type ']';

TheClassRef returns SimpleClassRef:
    clazz=[SingletonClass] | '(' clazz=[SingletonClass|QualifiedName] ')';

/* Fragments */

fragment WithMappedClass returns Class:
    ('mapped' 'to' jvmClass=[jvmTypes::JvmGenericType|QualifiedName])?;

fragment WithSuperclass returns Class: ('extends' superclassRef=ClassRef)?;

fragment WithType returns Typed: ':' type=Type;

fragment WithParams returns Executable: ('(' (params+=Param (',' params+=Param)*)? ')')?;

fragment WithBody returns Executable: code=Block;

fragment WithArgs returns Argumented: ('(' (args+=Expr (',' args+=Expr)*)? ')')?;

/* Doc */

terminal ML_COMMENT: '/*'!'*' -> '*/'; // Apparently, need to exclude the /** pattern explicitly
terminal DOCUMENTATION: '/**' -> '*/';