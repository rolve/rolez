package rolez.util

import rolez.io.InputStream

// TODO: Port to Rolez

class Scanner mapped to java.util.Scanner {
    mapped new(source: readonly InputStream)
    mapped new(source: readonly InputStream, charset: readonly String)
    mapped new(source: pure String)
    
    mapped def readonly radix: int
    mapped def readwrite useRadix(radix: int): readonly Scanner
    mapped def readwrite useDelimiter(pattern: readonly String): readonly Scanner
    
    mapped def readonly hasNext: boolean
    mapped def readonly hasNext(pattern: readonly String): boolean
    mapped def readonly hasNextLine: boolean
    mapped def readonly hasNextBoolean: boolean
    mapped def readonly hasNextInt: boolean
    mapped def readonly hasNextInt(radix: int): boolean
    mapped def readonly hasNextDouble: boolean
    
    mapped def readwrite next: readonly String
    mapped def readwrite next(pattern: readonly String): readonly String
    mapped def readwrite nextLine: readonly String
    mapped def readwrite nextBoolean: boolean
    mapped def readwrite nextInt: int
    mapped def readwrite nextInt(radix: int): int
    mapped def readwrite nextDouble: double
    
    mapped def readwrite findInLine(pattern: readonly String): readonly String
    mapped def readwrite findWithinHorizon(pattern: readonly String, horizon: int): readonly String
    mapped def readwrite skip(pattern: readonly String): readonly Scanner
    
    mapped def readwrite close:
}

class Random mapped to java.util.Random {
    mapped new
    mapped new(seed: long)
    mapped def readwrite nextInt: int
    mapped def readwrite nextInt(n: int): int
    mapped def readwrite nextLong: long
    mapped def readwrite nextBoolean: boolean
    mapped def readwrite nextDouble: double
    mapped def readwrite nextGaussian: double
}

object Arrays mapped to java.util.Arrays {
    mapped def pure equals(a: readonly Array[double], a2: readonly Array[double]): boolean
    mapped def pure equals(a: readonly Array[long],   a2: readonly Array[long]): boolean
    mapped def pure equals(a: readonly Array[int],    a2: readonly Array[int]): boolean
    mapped def pure equals(a: readonly Array[short],  a2: readonly Array[short]): boolean
    mapped def pure equals(a: readonly Array[byte],   a2: readonly Array[byte]): boolean
    mapped def pure equals(a: readonly Array[char],   a2: readonly Array[char]): boolean
    // TODO: Enable mapping to generic methods
}

object Vectors mapped to java.util.Arrays {
    mapped def pure equals(a: pure Vector[double], a2: pure Vector[double]): boolean
    mapped def pure equals(a: pure Vector[long],   a2: pure Vector[long]): boolean
    mapped def pure equals(a: pure Vector[int],    a2: pure Vector[int]): boolean
    mapped def pure equals(a: pure Vector[short],  a2: pure Vector[short]): boolean
    mapped def pure equals(a: pure Vector[byte],   a2: pure Vector[byte]): boolean
    mapped def pure equals(a: pure Vector[char],   a2: pure Vector[char]): boolean
    // TODO: Enable mapping to generic methods
}