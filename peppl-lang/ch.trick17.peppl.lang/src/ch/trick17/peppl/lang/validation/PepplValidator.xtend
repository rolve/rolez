/*
 * generated by Xtext
 */
package ch.trick17.peppl.lang.validation

import ch.trick17.peppl.lang.peppl.Class
import ch.trick17.peppl.lang.peppl.Method
import ch.trick17.peppl.lang.peppl.PepplPackage.Literals
import ch.trick17.peppl.lang.typesystem.PepplSystem
import ch.trick17.peppl.lang.typesystem.PepplTypeUtils
import ch.trick17.peppl.lang.typesystem.validation.PepplSystemValidator
import javax.inject.Inject
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class PepplValidator extends PepplSystemValidator {

    public static val INVALID_NAME = "invalid name"
    public static val OBJECT_CLASS_NOT_DEFINED = "object class not defined"
    public static val DUPLICATE_METHOD = "duplicate method"
    public static val MISSING_OVERRIDE = "missing override"
    public static val INCORRECT_OVERRIDE = "incorrect override"
    public static val INCOMPATIBLE_RETURN_TYPE = "incompatible return type"

    @Inject private extension PepplSystem system
    @Inject private extension PepplTypeUtils

	@Check
    def checkClassNameStartsWithCapital(Class clazz) {
        if(!Character.isUpperCase(clazz.name.charAt(0)))
            warning("Name should start with a capital",
                Literals.NAMED__NAME, INVALID_NAME)
    }
	
	@Check
	def checkObjectExists(Class clazz) {
	    if(clazz.superclass == null && findClass(objectClassName, clazz) == null)
	       error("Object class is not defined",
	           Literals.NAMED__NAME,  OBJECT_CLASS_NOT_DEFINED)
	}
	
	@Check
	def checkNoDuplicateMethods(Method method) {
	    val matching = method.enclosingClass.methods.filter[equalSignature(method)]
	    if(matching.size < 1)
	       throw new AssertionError
	    if(matching.size > 1)
	       error("Duplicate method " + method.name + "("+ method.params.join(",") + ")",
	           Literals.NAMED__NAME, DUPLICATE_METHOD)
	}
	
	@Check
	def checkOverrides(Method method) {
	    val allMembers = method.enclosingClass.actualSuperclass.allMembers
        val allMethods = allMembers.filter(Method)
        val matching = allMethods.filter[
	               equalSignature(method)
	           ]
	    
	    if(matching.size > 0) {
	        if(method.overriding) {
                for(m : matching)
                    if(subtype(envFor(method), method.type, m.type).failed)
                        error("The return type is incompatible with " + m,
                            Literals.TYPED__TYPE, INCOMPATIBLE_RETURN_TYPE)
            }
            else
                error("Method must be declared with \"override\" since it
                        actually overrides a superclass method",
                    Literals.NAMED__NAME, MISSING_OVERRIDE)
        }
        else if(method.overriding)
           error("Method must override a superclass method",
               Literals.NAMED__NAME, INCORRECT_OVERRIDE)
	}
}