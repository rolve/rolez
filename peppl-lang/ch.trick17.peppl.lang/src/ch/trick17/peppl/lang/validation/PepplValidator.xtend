/*
 * generated by Xtext
 */
package ch.trick17.peppl.lang.validation

import org.eclipse.xtext.validation.Check
import ch.trick17.peppl.lang.peppl.PepplPackage
import ch.trick17.peppl.lang.typesystem.validation.PepplSystemValidator
import ch.trick17.peppl.lang.peppl.Class
import javax.inject.Inject
import ch.trick17.peppl.lang.typesystem.PepplSystem
import ch.trick17.peppl.lang.typesystem.PepplTypeUtils
import ch.trick17.peppl.lang.peppl.Method
import java.util.List
import ch.trick17.peppl.lang.peppl.Type

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class PepplValidator extends PepplSystemValidator {

    public static val INVALID_NAME = "invalid name"
    public static val OBJECT_CLASS_NOT_DEFINED = "object class not defined"
    public static val DUPLICATE_METHOD = "duplicate method"

    @Inject private extension PepplSystem system
    @Inject private extension PepplTypeUtils

	@Check
    def checkClassNameStartsWithCapital(Class clazz) {
        if(!Character.isUpperCase(clazz.name.charAt(0)))
            warning("Name should start with a capital",
                PepplPackage.Literals.NAMED__NAME,
                INVALID_NAME
            )
    }
	
	@Check
	def checkObjectExists(Class clazz) {
	    if(clazz.superclass == null && findClass(objectClassName, clazz) == null)
	        error("Object class is not defined",
	               PepplPackage.Literals.NAMED__NAME,
	               OBJECT_CLASS_NOT_DEFINED
	        )
	}
	
	@Check
	def checkNoDuplicateMethods(Method method) {
	    val paramTypes = method.params.map[type]
	    val matching = method.enclosingClass.methods.filter[
	        name.equals(method.name)
	           && thisRole.equals(method.thisRole)
	           && equalTypes(params.map[type], paramTypes)
	    ]
	    if(matching.size < 1)
	       throw new AssertionError
	    if(matching.size > 1)
	       error("Duplicate method " + method.name + "("+ method.params.join(",") + ")",
	           PepplPackage.Literals.NAMED__NAME,
	           DUPLICATE_METHOD
	       )
	}
	
	private def equalTypes(List<Type> left, List<Type> right) {
        val i = right.iterator
        left.size == right.size
            && left.forall[system.equalType(emptyEnvironment, it, i.next).value]
    }
}