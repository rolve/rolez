grammar ch.trick17.peppl.lang.Peppl with org.eclipse.xtext.common.Terminals

generate peppl "http://trick17.ch/peppl/lang/Peppl"

Program:
	classes+=Class* 'main' mainBlock=Block & classes+=Class*;

Class:
	'class' name=ID ('{' members+=Member+ '}')?;

Member:
    Field | Method;

Field:
    kind=VarKind name=ID ':' type=Type;

enum VarKind:
    VAL='val' | VAR='var';

Method:
    'def' name=ID
    ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
    ':' returnType=Type
    body=Block;

Parameter:
    name=ID ':' type=Type;

Block:
    {Block} '{' (statements+=Statement)* '}';

Statement:
    Block | LocalVariable | ExpressionStatement;

LocalVariable:
    kind=VarKind name=ID ':' type=Type ';';

ExpressionStatement:
    expr=Expression ';';

Expression:
    NonAssignment ({Assignment.left=current} '=' right=Expression)?; 

NonAssignment returns Expression:
    NonMemberAccess ('.' {MemberAccess.target=current} selection=Selection)*;

Selection:
    member+=[Member] ('(' arguments+=Expression (',' arguments+=Expression)* ')')?;

NonMemberAccess returns Expression:
    {This} 'this' | VariableRef | New | Literal | Parenthesized;

New:
    'new' class=[Class] ('(' arguments+=Expression (',' arguments+=Expression)* ')')?;

Literal:
    StringLiteral | IntLiteral | BooleanLiteral;

StringLiteral: value=STRING;

IntLiteral: value=INT;

BooleanLiteral: value=('true' | 'false');

VariableRef: var=[Variable];

Variable: LocalVariable | Parameter;

Parenthesized: '(' expr=Expression ')';

Type:
    (role=Role)? base=[Class] | PrimitiveType;

PrimitiveType:
    {Void} 'void' | {Int} 'int' | {Boolean} 'boolean' | {Char} 'char';

enum Role:
    READWRITE='readwrite' | READONLY='readonly' | INACCESSIBLE='inaccessible';