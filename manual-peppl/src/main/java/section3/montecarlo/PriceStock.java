/**************************************************************************
 *                                                                         *
 *         Java Grande Forum Benchmark Suite - Thread Version 1.0          *
 *                                                                         *
 *                            produced by                                  *
 *                                                                         *
 *                  Java Grande Benchmarking Project                       *
 *                                                                         *
 *                                at                                       *
 *                                                                         *
 *                Edinburgh Parallel Computing Centre                      *
 *                                                                         *
 *                email: epcc-javagrande@epcc.ed.ac.uk                     *
 *                                                                         *
 *      Original version of this code by Hon Yau (hwyau@epcc.ed.ac.uk)     *
 *                                                                         *
 *      This version copyright (c) The University of Edinburgh, 2001.      *
 *                         All rights reserved.                            *
 *                                                                         *
 **************************************************************************/

package section3.montecarlo;

/**
 * Class to do the work in the Application demonstrator, in particular the
 * pricing of the stock path generated by Monte Carlo. The run method will
 * generate a single sequence with the required statistics, estimate its
 * volatility, expected return rate and final stock price value.
 *
 * @author H W Yau
 * @version $Revision: 1.5 $ $Date: 1999/02/16 18:52:15 $
 */
public class PriceStock {
    
    /**
     * The Monte Carlo path to be generated.
     */
    private final MonteCarloPath mcPath;
    /**
     * Random seed from which the Monte Carlo sequence is started.
     */
    private final long randomSeed;
    /**
     * Initial stock price value.
     */
    private final double pathStartValue;
    
    /**
     * @param pathParams
     *            The parameters for the paths
     * @param seed
     *            The random seed
     * @param pathStartValue
     *            The stock price value to use at the start of each Monte Carlo
     *            simulation path.
     */
    public PriceStock(final PathParameters pathParams, final long seed,
            final double pathStartValue) {
        mcPath = new MonteCarloPath(pathParams);
        
        this.pathStartValue = pathStartValue;
        randomSeed = seed;
    }
    
    /**
     * The business end. Invokes the necessary computation routine, for a a
     * given task.
     * 
     * @return the expected return rate for the computed path
     */
    public double run() {
        mcPath.computeFluctuationsGaussian(randomSeed);
        mcPath.computePathValue(pathStartValue);
        final RatePath rateP = new RatePath(mcPath);
        final ReturnPath returnP = rateP.getReturnCompounded();
        returnP.estimatePath();
        return returnP.get_expectedReturnRate();
    }
}
