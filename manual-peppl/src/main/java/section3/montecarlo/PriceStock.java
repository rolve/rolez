/**************************************************************************
*                                                                         *
*         Java Grande Forum Benchmark Suite - Thread Version 1.0          *
*                                                                         *
*                            produced by                                  *
*                                                                         *
*                  Java Grande Benchmarking Project                       *
*                                                                         *
*                                at                                       *
*                                                                         *
*                Edinburgh Parallel Computing Centre                      *
*                                                                         *
*                email: epcc-javagrande@epcc.ed.ac.uk                     *
*                                                                         *
*      Original version of this code by Hon Yau (hwyau@epcc.ed.ac.uk)     *
*                                                                         *
*      This version copyright (c) The University of Edinburgh, 2001.      *
*                         All rights reserved.                            *
*                                                                         *
**************************************************************************/


package section3.montecarlo;
/**
  * Class to do the work in the Application demonstrator, in particular
  * the pricing of the stock path generated by Monte Carlo.  The run
  * method will generate a single sequence with the required statistics,
  * estimate its volatility, expected return rate and final stock price
  * value.
  *
  * @author H W Yau
  * @version $Revision: 1.5 $ $Date: 1999/02/16 18:52:15 $
  */
public class PriceStock extends Universal {

  //------------------------------------------------------------------------
  // Instance variables.
  //------------------------------------------------------------------------
  /**
    * The Monte Carlo path to be generated.
    */
  private final MonteCarloPath mcPath;
  /**
    * Random seed from which the Monte Carlo sequence is started.
    */
  private long randomSeed=-1;
  /**
    * Initial stock price value.
    */
  private double pathStartValue=Double.NaN;
  /**
    * Object which represents the results from a given computation task.
    */
  private double expectedReturnRate=Double.NaN;
  private double[] pathValue;

  //------------------------------------------------------------------------
  // Constructors.
  //------------------------------------------------------------------------
  /**
    * Default constructor.
    */
  public PriceStock() {
    mcPath = new MonteCarloPath();
    set_prompt("PriceStock> ");
    set_DEBUG(true);
  }
  //------------------------------------------------------------------------
  // Methods.
  //------------------------------------------------------------------------
  //------------------------------------------------------------------------
  // Methods which implement the Slaveable interface.
  //------------------------------------------------------------------------
  /**
    * Method which is passed in the initialisation data common to all tasks,
    * and then unpacks them for use by this object.
    *
    * @param initAllTasks Object representing data which are common to all tasks.
    */
  public void setInitAllTasks(ToInitAllTasks initAllTasks) {
    mcPath.set_name(initAllTasks.get_name());
    mcPath.set_startDate(initAllTasks.get_startDate());
    mcPath.set_endDate(initAllTasks.get_endDate());
    mcPath.set_dTime(initAllTasks.get_dTime());
    mcPath.set_returnDefinition(initAllTasks.get_returnDefinition());
    mcPath.set_expectedReturnRate(initAllTasks.get_expectedReturnRate());
    mcPath.set_volatility(initAllTasks.get_volatility());
    mcPath.set_nTimeSteps(initAllTasks.get_nTimeSteps());
    pathStartValue = initAllTasks.get_pathStartValue();
    mcPath.set_pathValue(new double[initAllTasks.get_nTimeSteps()]);
    mcPath.set_fluctuations(new double[initAllTasks.get_nTimeSteps()]);
  }
  public void setSeed(long seed) {
    this.randomSeed = seed;
  }
  /**
    * The business end.  Invokes the necessary computation routine, for a
    * a given task.
    */
  public void run() {
    try{
      mcPath.computeFluctuationsGaussian(randomSeed);
      mcPath.computePathValue(pathStartValue);
      RatePath rateP = new RatePath(mcPath);
      ReturnPath returnP = rateP.getReturnCompounded();
      returnP.estimatePath();
      expectedReturnRate = returnP.get_expectedReturnRate();
      pathValue = mcPath.get_pathValue();
    } catch( DemoException demoEx ) {
      errPrintln(demoEx.toString());
    }
  }

  public double getExpectedReturnRate() {
    return expectedReturnRate;
  }
}
