grammar ch.trick17.rolez.lang.Rolez with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore"

generate rolez "http://trick17.ch/rolez/lang/Rolez"

Program:
    ('package' name=QualifiedName)?
    imports+=Import*
    elements+=ClassLike+;

Import:
    'import' importedNamespace=QualifiedNameWithWildCard;

QualifiedName:
    ID ('.' ID)*;

QualifiedNameWithWildCard:
    QualifiedName '.*'?;

ClassLike:
    Class | Task;

Class:
    mapped?='mapped'? 'class' name=QualifiedName
    ('[' typeParam=TypeParam ']')?
    ('extends' superclass=[Class|QualifiedName])?
    ('{'
        (constrs+=Constr | members+=Member)+
    '}')?;

Task:
    'task' name=QualifiedName ('(' params+=Param (',' params+=Param)* ')')?
    ':' type=Type body=Block;

TypeParam: name=ID;

Member:
    Field | Method;

Constr:
    {Constr} mapped?='mapped'? 'new' ('(' params+=Param (',' params+=Param)* ')')?
    body=Block?;

Field:
    mapped?='mapped'? kind=VarKind name=ID ':' type=Type;

enum VarKind:
    VAL='val' | VAR='var';

Method:
    mapped?='mapped'? (overriding?='override' | 'def')
    thisRole=Role name=ID
    ('(' params+=Param (',' params+=Param)* ')')?
    ':' type=Type
    body=Block?;

Param:
    kind=Val name=ID ':' type=Type;

enum Val returns VarKind: VAL='val';

Block:
    {Block} '{' (stmts+=Stmt)* '}';

Stmt:
    Block | LocalVarDecl | IfStmt | WhileLoop | SuperConstrCall | Return | ExprStmt;

LocalVarDecl:
    variable=LocalVar ('=' initializer=Expr)? ';';

LocalVar:
    kind=VarKind name=ID ':' type=Type;

IfStmt:
    'if' '(' condition=Expr ')' thenPart=Stmt
    (=>'else' elsePart=Stmt)?;

WhileLoop:
    'while' '(' condition=Expr ')' body=Stmt;

// TODO: for-each and maybe parallel for-each

SuperConstrCall:
    {SuperConstrCall} 'super' '(' (args+=Expr (',' args+=Expr)*)? ')' ';';

Return:
    ReturnNothing | ReturnExpr;

ReturnNothing:
    {ReturnNothing} 'return' ';';

ReturnExpr:
    'return' expr=Expr ';';

ExprStmt:
    expr=Expr ';';

Expr:
    Assignment;

Assignment returns Expr:
    OrExpr ({Assignment.left=current} '=' right=Expr)?;

OrExpr returns Expr:
    AndExpr ({LogicalExpr.left=current} op=OpOr right=AndExpr)?;

enum OpOr returns OpLogical: OR='||';

AndExpr returns Expr:
    EqualityExpr ({LogicalExpr.left=current} op=OpAnd right=EqualityExpr)?;

enum OpAnd returns OpLogical: AND='&&';

EqualityExpr returns Expr:
    RelationalExpr ({EqualityExpr.left=current} op=OpEquality right=RelationalExpr)?;

enum OpEquality: EQUALS='==' | NOT_EQUALS='!=';

RelationalExpr returns Expr:
    AdditiveExpr ({RelationalExpr.left=current} op=OpRelational right=AdditiveExpr)?;

enum OpRelational: SMALLER='<' | GREATER='>' | SMALLER_EQUALS='<=' | GREATER_EQUALS='>=';

AdditiveExpr returns Expr:
    MultiplicativeExpr ({ArithmeticBinaryExpr.left=current} op=OpAdditive right=MultiplicativeExpr)*;

enum OpAdditive returns OpArithmetic: PLUS='+' | MINUS='-';

MultiplicativeExpr returns Expr:
    Cast ({ArithmeticBinaryExpr.left=current} op=OpMultiplicative right=Cast)*;

enum OpMultiplicative returns OpArithmetic: TIMES='*' | DIVIDED_BY='/' | MODULO='%';

Cast returns Expr:
    UnaryMinus ({Cast.expr=current} 'as' type=Type)*;

UnaryMinus returns Expr:
    UnaryNot | {UnaryMinus} '-' expr=UnaryNot;

UnaryNot returns Expr:
    MemberAccess | {UnaryNot} '!' expr=MemberAccess;

MemberAccess returns Expr:
    SimpleExpr ({MemberAccess.target=current} '.' member=[Member] ('(' args+=Expr (',' args+=Expr)* ')')? )*;
    // TODO: Allow member accesses without "this"

SimpleExpr returns Expr:
    {This} 'this' | VarRef | New | Start | Parenthesized | Literal;

VarRef: variable=[Var];

// The mess begins here: this rule is necessary for feature normalization
// to work for the Argumented interface. And it needs to be here...
ArgsOnly: args+=Expr;

New:
    'new' classRef=UnambiguousClassRef ('(' args+=Expr (',' args+=Expr)* ')')?;

Start:
    'start' taskRef=TaskRef ('(' args+=Expr (',' args+=Expr)* ')')?;

Parenthesized: '(' expr=Expr ')';

Literal:
    IntLiteral | DoubleLiteral | BooleanLiteral | CharLiteral | StringLiteral | {NullLiteral} 'null';

StringLiteral: value=STRING;

terminal STRING: '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"';

IntLiteral: value=INT;

DoubleLiteral: value=DOUBLE;

terminal DOUBLE: INT '.' INT;

BooleanLiteral: value=Bool;

CharLiteral: value=CHAR;

terminal CHAR returns EChar: "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") ) "'";

Bool returns EBoolean: 'true' | 'false';


Type:
    ReferenceType | PrimitiveType | TypeParamRef;

ReferenceType:
    RoleType | {Null} NULL_TYPE;

PrimitiveType:
    {Int} 'int' | {Double} 'double' | {Boolean} 'boolean' | {Char} 'char' | {Void} 'void'?;

TypeParamRef:
    param=[TypeParam];

RoleType:
    role=Role base=ClassRef;

terminal NULL_TYPE: 'Null';

enum Role:
    READWRITE='readwrite' | READONLY='readonly' | PURE='pure';

ClassRef:
    SimpleClassRef | GenericClassRef;

SimpleClassRef:
    clazz=[Class|QualifiedName];

GenericClassRef:
    clazz=[Class|QualifiedName] '[' typeArg=Type ']';

UnambiguousClassRef returns ClassRef:
    {SimpleClassRef} '(' clazz=[Class|QualifiedName] ')'
    | {SimpleClassRef} clazz=[Class]
    | GenericClassRef;

TaskRef:
    '(' task=[Task|QualifiedName] ')' | task=[Task];


/* 
 * The following rules are only used to modify the type hierarchy. The
 * various IDs suppress ambiguity warnings. It's a mess...
 */

Expr2 returns Expr:
    UnaryExpr | BinaryExpr;

UnaryExpr:
    {UnaryMinus} | ID {UnaryNot} | ID ID {Cast} | ID ID ID {Parenthesized};

BinaryExpr:
    {Assignment} | ID {LogicalExpr} | ID ID {EqualityExpr}
        | ID ID ID {RelationalExpr} | ID ID ID ID {ArithmeticBinaryExpr};

Instr:
    Expr | Stmt;

Var:
    LocalVar | {Param};

Named:
    ClassLike | Typed;

Typed:
    TypedBody | Field | {Var};

ParameterizedBody:
    Constr | TypedBody;

TypedBody:
    Method | Task;

Argumented:
    {MemberAccess} | New | Start | SuperConstrCall | ArgsOnly;