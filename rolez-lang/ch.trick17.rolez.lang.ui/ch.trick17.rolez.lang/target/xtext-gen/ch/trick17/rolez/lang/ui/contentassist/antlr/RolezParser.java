/*
 * generated by Xtext
 */
package ch.trick17.rolez.lang.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import ch.trick17.rolez.lang.services.RolezGrammarAccess;

public class RolezParser extends AbstractContentAssistParser {
	
	@Inject
	private RolezGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected ch.trick17.rolez.lang.ui.contentassist.antlr.internal.InternalRolezParser createParser() {
		ch.trick17.rolez.lang.ui.contentassist.antlr.internal.InternalRolezParser result = new ch.trick17.rolez.lang.ui.contentassist.antlr.internal.InternalRolezParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getClassLikeAccess().getAlternatives(), "rule__ClassLike__Alternatives");
					put(grammarAccess.getClassAccess().getAlternatives(), "rule__Class__Alternatives");
					put(grammarAccess.getNormalClassAccess().getAlternatives_5_1(), "rule__NormalClass__Alternatives_5_1");
					put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
					put(grammarAccess.getMethodAccess().getAlternatives_1(), "rule__Method__Alternatives_1");
					put(grammarAccess.getStmtAccess().getAlternatives(), "rule__Stmt__Alternatives");
					put(grammarAccess.getReturnAccess().getAlternatives(), "rule__Return__Alternatives");
					put(grammarAccess.getUnaryMinusAccess().getAlternatives(), "rule__UnaryMinus__Alternatives");
					put(grammarAccess.getUnaryNotAccess().getAlternatives(), "rule__UnaryNot__Alternatives");
					put(grammarAccess.getSimpleExprAccess().getAlternatives(), "rule__SimpleExpr__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getBoolAccess().getAlternatives(), "rule__Bool__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getReferenceTypeAccess().getAlternatives(), "rule__ReferenceType__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getClassRefAccess().getAlternatives(), "rule__ClassRef__Alternatives");
					put(grammarAccess.getNewClassRefAccess().getAlternatives(), "rule__NewClassRef__Alternatives");
					put(grammarAccess.getTheClassRefAccess().getAlternatives(), "rule__TheClassRef__Alternatives");
					put(grammarAccess.getTaskRefAccess().getAlternatives(), "rule__TaskRef__Alternatives");
					put(grammarAccess.getExpr2Access().getAlternatives(), "rule__Expr2__Alternatives");
					put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
					put(grammarAccess.getBinaryExprAccess().getAlternatives(), "rule__BinaryExpr__Alternatives");
					put(grammarAccess.getInstrAccess().getAlternatives(), "rule__Instr__Alternatives");
					put(grammarAccess.getVarAccess().getAlternatives(), "rule__Var__Alternatives");
					put(grammarAccess.getNamedAccess().getAlternatives(), "rule__Named__Alternatives");
					put(grammarAccess.getTypedAccess().getAlternatives(), "rule__Typed__Alternatives");
					put(grammarAccess.getParameterizedBodyAccess().getAlternatives(), "rule__ParameterizedBody__Alternatives");
					put(grammarAccess.getTypedBodyAccess().getAlternatives(), "rule__TypedBody__Alternatives");
					put(grammarAccess.getArgumentedAccess().getAlternatives(), "rule__Argumented__Alternatives");
					put(grammarAccess.getVarKindAccess().getAlternatives(), "rule__VarKind__Alternatives");
					put(grammarAccess.getOpEqualityAccess().getAlternatives(), "rule__OpEquality__Alternatives");
					put(grammarAccess.getOpRelationalAccess().getAlternatives(), "rule__OpRelational__Alternatives");
					put(grammarAccess.getOpAdditiveAccess().getAlternatives(), "rule__OpAdditive__Alternatives");
					put(grammarAccess.getOpMultiplicativeAccess().getAlternatives(), "rule__OpMultiplicative__Alternatives");
					put(grammarAccess.getRoleAccess().getAlternatives(), "rule__Role__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getProgramAccess().getGroup_0(), "rule__Program__Group_0__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getNormalClassAccess().getGroup(), "rule__NormalClass__Group__0");
					put(grammarAccess.getNormalClassAccess().getGroup_3(), "rule__NormalClass__Group_3__0");
					put(grammarAccess.getNormalClassAccess().getGroup_4(), "rule__NormalClass__Group_4__0");
					put(grammarAccess.getNormalClassAccess().getGroup_5(), "rule__NormalClass__Group_5__0");
					put(grammarAccess.getSingletonClassAccess().getGroup(), "rule__SingletonClass__Group__0");
					put(grammarAccess.getSingletonClassAccess().getGroup_3(), "rule__SingletonClass__Group_3__0");
					put(grammarAccess.getSingletonClassAccess().getGroup_4(), "rule__SingletonClass__Group_4__0");
					put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
					put(grammarAccess.getTaskAccess().getGroup_2(), "rule__Task__Group_2__0");
					put(grammarAccess.getTaskAccess().getGroup_2_2(), "rule__Task__Group_2_2__0");
					put(grammarAccess.getConstrAccess().getGroup(), "rule__Constr__Group__0");
					put(grammarAccess.getConstrAccess().getGroup_3(), "rule__Constr__Group_3__0");
					put(grammarAccess.getConstrAccess().getGroup_3_2(), "rule__Constr__Group_3_2__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getFieldAccess().getGroup_5(), "rule__Field__Group_5__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_4(), "rule__Method__Group_4__0");
					put(grammarAccess.getMethodAccess().getGroup_4_2(), "rule__Method__Group_4_2__0");
					put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getLocalVarDeclAccess().getGroup(), "rule__LocalVarDecl__Group__0");
					put(grammarAccess.getLocalVarDeclAccess().getGroup_1(), "rule__LocalVarDecl__Group_1__0");
					put(grammarAccess.getLocalVarAccess().getGroup(), "rule__LocalVar__Group__0");
					put(grammarAccess.getIfStmtAccess().getGroup(), "rule__IfStmt__Group__0");
					put(grammarAccess.getIfStmtAccess().getGroup_5(), "rule__IfStmt__Group_5__0");
					put(grammarAccess.getWhileLoopAccess().getGroup(), "rule__WhileLoop__Group__0");
					put(grammarAccess.getSuperConstrCallAccess().getGroup(), "rule__SuperConstrCall__Group__0");
					put(grammarAccess.getSuperConstrCallAccess().getGroup_2(), "rule__SuperConstrCall__Group_2__0");
					put(grammarAccess.getSuperConstrCallAccess().getGroup_2_2(), "rule__SuperConstrCall__Group_2_2__0");
					put(grammarAccess.getReturnNothingAccess().getGroup(), "rule__ReturnNothing__Group__0");
					put(grammarAccess.getReturnExprAccess().getGroup(), "rule__ReturnExpr__Group__0");
					put(grammarAccess.getExprStmtAccess().getGroup(), "rule__ExprStmt__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup_1(), "rule__Assignment__Group_1__0");
					put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
					put(grammarAccess.getOrExprAccess().getGroup_1(), "rule__OrExpr__Group_1__0");
					put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
					put(grammarAccess.getAndExprAccess().getGroup_1(), "rule__AndExpr__Group_1__0");
					put(grammarAccess.getEqualityExprAccess().getGroup(), "rule__EqualityExpr__Group__0");
					put(grammarAccess.getEqualityExprAccess().getGroup_1(), "rule__EqualityExpr__Group_1__0");
					put(grammarAccess.getRelationalExprAccess().getGroup(), "rule__RelationalExpr__Group__0");
					put(grammarAccess.getRelationalExprAccess().getGroup_1(), "rule__RelationalExpr__Group_1__0");
					put(grammarAccess.getAdditiveExprAccess().getGroup(), "rule__AdditiveExpr__Group__0");
					put(grammarAccess.getAdditiveExprAccess().getGroup_1(), "rule__AdditiveExpr__Group_1__0");
					put(grammarAccess.getMultiplicativeExprAccess().getGroup(), "rule__MultiplicativeExpr__Group__0");
					put(grammarAccess.getMultiplicativeExprAccess().getGroup_1(), "rule__MultiplicativeExpr__Group_1__0");
					put(grammarAccess.getCastAccess().getGroup(), "rule__Cast__Group__0");
					put(grammarAccess.getCastAccess().getGroup_1(), "rule__Cast__Group_1__0");
					put(grammarAccess.getUnaryMinusAccess().getGroup_1(), "rule__UnaryMinus__Group_1__0");
					put(grammarAccess.getUnaryNotAccess().getGroup_1(), "rule__UnaryNot__Group_1__0");
					put(grammarAccess.getMemberAccessAccess().getGroup(), "rule__MemberAccess__Group__0");
					put(grammarAccess.getMemberAccessAccess().getGroup_1(), "rule__MemberAccess__Group_1__0");
					put(grammarAccess.getMemberAccessAccess().getGroup_1_3(), "rule__MemberAccess__Group_1_3__0");
					put(grammarAccess.getMemberAccessAccess().getGroup_1_3_2(), "rule__MemberAccess__Group_1_3_2__0");
					put(grammarAccess.getSimpleExprAccess().getGroup_0(), "rule__SimpleExpr__Group_0__0");
					put(grammarAccess.getNewAccess().getGroup(), "rule__New__Group__0");
					put(grammarAccess.getNewAccess().getGroup_2(), "rule__New__Group_2__0");
					put(grammarAccess.getNewAccess().getGroup_2_2(), "rule__New__Group_2_2__0");
					put(grammarAccess.getTheAccess().getGroup(), "rule__The__Group__0");
					put(grammarAccess.getStartAccess().getGroup(), "rule__Start__Group__0");
					put(grammarAccess.getStartAccess().getGroup_2(), "rule__Start__Group_2__0");
					put(grammarAccess.getStartAccess().getGroup_2_2(), "rule__Start__Group_2_2__0");
					put(grammarAccess.getParenthesizedAccess().getGroup(), "rule__Parenthesized__Group__0");
					put(grammarAccess.getLiteralAccess().getGroup_5(), "rule__Literal__Group_5__0");
					put(grammarAccess.getReferenceTypeAccess().getGroup_1(), "rule__ReferenceType__Group_1__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_0(), "rule__PrimitiveType__Group_0__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_1(), "rule__PrimitiveType__Group_1__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_2(), "rule__PrimitiveType__Group_2__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_3(), "rule__PrimitiveType__Group_3__0");
					put(grammarAccess.getPrimitiveTypeAccess().getGroup_4(), "rule__PrimitiveType__Group_4__0");
					put(grammarAccess.getRoleTypeAccess().getGroup(), "rule__RoleType__Group__0");
					put(grammarAccess.getGenericClassRefAccess().getGroup(), "rule__GenericClassRef__Group__0");
					put(grammarAccess.getNewClassRefAccess().getGroup_0(), "rule__NewClassRef__Group_0__0");
					put(grammarAccess.getNewClassRefAccess().getGroup_1(), "rule__NewClassRef__Group_1__0");
					put(grammarAccess.getTheClassRefAccess().getGroup_0(), "rule__TheClassRef__Group_0__0");
					put(grammarAccess.getTheClassRefAccess().getGroup_1(), "rule__TheClassRef__Group_1__0");
					put(grammarAccess.getTaskRefAccess().getGroup_0(), "rule__TaskRef__Group_0__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_1(), "rule__UnaryExpr__Group_1__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_2(), "rule__UnaryExpr__Group_2__0");
					put(grammarAccess.getUnaryExprAccess().getGroup_3(), "rule__UnaryExpr__Group_3__0");
					put(grammarAccess.getBinaryExprAccess().getGroup_1(), "rule__BinaryExpr__Group_1__0");
					put(grammarAccess.getBinaryExprAccess().getGroup_2(), "rule__BinaryExpr__Group_2__0");
					put(grammarAccess.getBinaryExprAccess().getGroup_3(), "rule__BinaryExpr__Group_3__0");
					put(grammarAccess.getBinaryExprAccess().getGroup_4(), "rule__BinaryExpr__Group_4__0");
					put(grammarAccess.getProgramAccess().getNameAssignment_0_1(), "rule__Program__NameAssignment_0_1");
					put(grammarAccess.getProgramAccess().getImportsAssignment_1(), "rule__Program__ImportsAssignment_1");
					put(grammarAccess.getProgramAccess().getElementsAssignment_2(), "rule__Program__ElementsAssignment_2");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getNormalClassAccess().getMappedAssignment_0(), "rule__NormalClass__MappedAssignment_0");
					put(grammarAccess.getNormalClassAccess().getNameAssignment_2(), "rule__NormalClass__NameAssignment_2");
					put(grammarAccess.getNormalClassAccess().getTypeParamAssignment_3_1(), "rule__NormalClass__TypeParamAssignment_3_1");
					put(grammarAccess.getNormalClassAccess().getSuperclassAssignment_4_1(), "rule__NormalClass__SuperclassAssignment_4_1");
					put(grammarAccess.getNormalClassAccess().getConstrsAssignment_5_1_0(), "rule__NormalClass__ConstrsAssignment_5_1_0");
					put(grammarAccess.getNormalClassAccess().getMembersAssignment_5_1_1(), "rule__NormalClass__MembersAssignment_5_1_1");
					put(grammarAccess.getSingletonClassAccess().getMappedAssignment_0(), "rule__SingletonClass__MappedAssignment_0");
					put(grammarAccess.getSingletonClassAccess().getNameAssignment_2(), "rule__SingletonClass__NameAssignment_2");
					put(grammarAccess.getSingletonClassAccess().getSuperclassAssignment_3_1(), "rule__SingletonClass__SuperclassAssignment_3_1");
					put(grammarAccess.getSingletonClassAccess().getMembersAssignment_4_1(), "rule__SingletonClass__MembersAssignment_4_1");
					put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
					put(grammarAccess.getTaskAccess().getParamsAssignment_2_1(), "rule__Task__ParamsAssignment_2_1");
					put(grammarAccess.getTaskAccess().getParamsAssignment_2_2_1(), "rule__Task__ParamsAssignment_2_2_1");
					put(grammarAccess.getTaskAccess().getTypeAssignment_4(), "rule__Task__TypeAssignment_4");
					put(grammarAccess.getTaskAccess().getBodyAssignment_5(), "rule__Task__BodyAssignment_5");
					put(grammarAccess.getTypeParamAccess().getNameAssignment(), "rule__TypeParam__NameAssignment");
					put(grammarAccess.getConstrAccess().getMappedAssignment_1(), "rule__Constr__MappedAssignment_1");
					put(grammarAccess.getConstrAccess().getParamsAssignment_3_1(), "rule__Constr__ParamsAssignment_3_1");
					put(grammarAccess.getConstrAccess().getParamsAssignment_3_2_1(), "rule__Constr__ParamsAssignment_3_2_1");
					put(grammarAccess.getConstrAccess().getBodyAssignment_4(), "rule__Constr__BodyAssignment_4");
					put(grammarAccess.getFieldAccess().getMappedAssignment_0(), "rule__Field__MappedAssignment_0");
					put(grammarAccess.getFieldAccess().getKindAssignment_1(), "rule__Field__KindAssignment_1");
					put(grammarAccess.getFieldAccess().getNameAssignment_2(), "rule__Field__NameAssignment_2");
					put(grammarAccess.getFieldAccess().getTypeAssignment_4(), "rule__Field__TypeAssignment_4");
					put(grammarAccess.getFieldAccess().getInitializerAssignment_5_1(), "rule__Field__InitializerAssignment_5_1");
					put(grammarAccess.getMethodAccess().getMappedAssignment_0(), "rule__Method__MappedAssignment_0");
					put(grammarAccess.getMethodAccess().getOverridingAssignment_1_0(), "rule__Method__OverridingAssignment_1_0");
					put(grammarAccess.getMethodAccess().getThisRoleAssignment_2(), "rule__Method__ThisRoleAssignment_2");
					put(grammarAccess.getMethodAccess().getNameAssignment_3(), "rule__Method__NameAssignment_3");
					put(grammarAccess.getMethodAccess().getParamsAssignment_4_1(), "rule__Method__ParamsAssignment_4_1");
					put(grammarAccess.getMethodAccess().getParamsAssignment_4_2_1(), "rule__Method__ParamsAssignment_4_2_1");
					put(grammarAccess.getMethodAccess().getTypeAssignment_6(), "rule__Method__TypeAssignment_6");
					put(grammarAccess.getMethodAccess().getBodyAssignment_7(), "rule__Method__BodyAssignment_7");
					put(grammarAccess.getParamAccess().getKindAssignment_0(), "rule__Param__KindAssignment_0");
					put(grammarAccess.getParamAccess().getNameAssignment_1(), "rule__Param__NameAssignment_1");
					put(grammarAccess.getParamAccess().getTypeAssignment_3(), "rule__Param__TypeAssignment_3");
					put(grammarAccess.getBlockAccess().getStmtsAssignment_2(), "rule__Block__StmtsAssignment_2");
					put(grammarAccess.getLocalVarDeclAccess().getVariableAssignment_0(), "rule__LocalVarDecl__VariableAssignment_0");
					put(grammarAccess.getLocalVarDeclAccess().getInitializerAssignment_1_1(), "rule__LocalVarDecl__InitializerAssignment_1_1");
					put(grammarAccess.getLocalVarAccess().getKindAssignment_0(), "rule__LocalVar__KindAssignment_0");
					put(grammarAccess.getLocalVarAccess().getNameAssignment_1(), "rule__LocalVar__NameAssignment_1");
					put(grammarAccess.getLocalVarAccess().getTypeAssignment_3(), "rule__LocalVar__TypeAssignment_3");
					put(grammarAccess.getIfStmtAccess().getConditionAssignment_2(), "rule__IfStmt__ConditionAssignment_2");
					put(grammarAccess.getIfStmtAccess().getThenPartAssignment_4(), "rule__IfStmt__ThenPartAssignment_4");
					put(grammarAccess.getIfStmtAccess().getElsePartAssignment_5_1(), "rule__IfStmt__ElsePartAssignment_5_1");
					put(grammarAccess.getWhileLoopAccess().getConditionAssignment_2(), "rule__WhileLoop__ConditionAssignment_2");
					put(grammarAccess.getWhileLoopAccess().getBodyAssignment_4(), "rule__WhileLoop__BodyAssignment_4");
					put(grammarAccess.getSuperConstrCallAccess().getArgsAssignment_2_1(), "rule__SuperConstrCall__ArgsAssignment_2_1");
					put(grammarAccess.getSuperConstrCallAccess().getArgsAssignment_2_2_1(), "rule__SuperConstrCall__ArgsAssignment_2_2_1");
					put(grammarAccess.getReturnExprAccess().getExprAssignment_1(), "rule__ReturnExpr__ExprAssignment_1");
					put(grammarAccess.getExprStmtAccess().getExprAssignment_0(), "rule__ExprStmt__ExprAssignment_0");
					put(grammarAccess.getAssignmentAccess().getRightAssignment_1_2(), "rule__Assignment__RightAssignment_1_2");
					put(grammarAccess.getOrExprAccess().getOpAssignment_1_1(), "rule__OrExpr__OpAssignment_1_1");
					put(grammarAccess.getOrExprAccess().getRightAssignment_1_2(), "rule__OrExpr__RightAssignment_1_2");
					put(grammarAccess.getAndExprAccess().getOpAssignment_1_1(), "rule__AndExpr__OpAssignment_1_1");
					put(grammarAccess.getAndExprAccess().getRightAssignment_1_2(), "rule__AndExpr__RightAssignment_1_2");
					put(grammarAccess.getEqualityExprAccess().getOpAssignment_1_1(), "rule__EqualityExpr__OpAssignment_1_1");
					put(grammarAccess.getEqualityExprAccess().getRightAssignment_1_2(), "rule__EqualityExpr__RightAssignment_1_2");
					put(grammarAccess.getRelationalExprAccess().getOpAssignment_1_1(), "rule__RelationalExpr__OpAssignment_1_1");
					put(grammarAccess.getRelationalExprAccess().getRightAssignment_1_2(), "rule__RelationalExpr__RightAssignment_1_2");
					put(grammarAccess.getAdditiveExprAccess().getOpAssignment_1_1(), "rule__AdditiveExpr__OpAssignment_1_1");
					put(grammarAccess.getAdditiveExprAccess().getRightAssignment_1_2(), "rule__AdditiveExpr__RightAssignment_1_2");
					put(grammarAccess.getMultiplicativeExprAccess().getOpAssignment_1_1(), "rule__MultiplicativeExpr__OpAssignment_1_1");
					put(grammarAccess.getMultiplicativeExprAccess().getRightAssignment_1_2(), "rule__MultiplicativeExpr__RightAssignment_1_2");
					put(grammarAccess.getCastAccess().getTypeAssignment_1_2(), "rule__Cast__TypeAssignment_1_2");
					put(grammarAccess.getUnaryMinusAccess().getExprAssignment_1_2(), "rule__UnaryMinus__ExprAssignment_1_2");
					put(grammarAccess.getUnaryNotAccess().getExprAssignment_1_2(), "rule__UnaryNot__ExprAssignment_1_2");
					put(grammarAccess.getMemberAccessAccess().getMemberAssignment_1_2(), "rule__MemberAccess__MemberAssignment_1_2");
					put(grammarAccess.getMemberAccessAccess().getArgsAssignment_1_3_1(), "rule__MemberAccess__ArgsAssignment_1_3_1");
					put(grammarAccess.getMemberAccessAccess().getArgsAssignment_1_3_2_1(), "rule__MemberAccess__ArgsAssignment_1_3_2_1");
					put(grammarAccess.getVarRefAccess().getVariableAssignment(), "rule__VarRef__VariableAssignment");
					put(grammarAccess.getArgsOnlyAccess().getArgsAssignment(), "rule__ArgsOnly__ArgsAssignment");
					put(grammarAccess.getNewAccess().getClassRefAssignment_1(), "rule__New__ClassRefAssignment_1");
					put(grammarAccess.getNewAccess().getArgsAssignment_2_1(), "rule__New__ArgsAssignment_2_1");
					put(grammarAccess.getNewAccess().getArgsAssignment_2_2_1(), "rule__New__ArgsAssignment_2_2_1");
					put(grammarAccess.getTheAccess().getClassRefAssignment_1(), "rule__The__ClassRefAssignment_1");
					put(grammarAccess.getStartAccess().getTaskRefAssignment_1(), "rule__Start__TaskRefAssignment_1");
					put(grammarAccess.getStartAccess().getArgsAssignment_2_1(), "rule__Start__ArgsAssignment_2_1");
					put(grammarAccess.getStartAccess().getArgsAssignment_2_2_1(), "rule__Start__ArgsAssignment_2_2_1");
					put(grammarAccess.getParenthesizedAccess().getExprAssignment_1(), "rule__Parenthesized__ExprAssignment_1");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getIntLiteralAccess().getValueAssignment(), "rule__IntLiteral__ValueAssignment");
					put(grammarAccess.getDoubleLiteralAccess().getValueAssignment(), "rule__DoubleLiteral__ValueAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getCharLiteralAccess().getValueAssignment(), "rule__CharLiteral__ValueAssignment");
					put(grammarAccess.getTypeParamRefAccess().getParamAssignment(), "rule__TypeParamRef__ParamAssignment");
					put(grammarAccess.getRoleTypeAccess().getRoleAssignment_0(), "rule__RoleType__RoleAssignment_0");
					put(grammarAccess.getRoleTypeAccess().getBaseAssignment_1(), "rule__RoleType__BaseAssignment_1");
					put(grammarAccess.getSimpleClassRefAccess().getClazzAssignment(), "rule__SimpleClassRef__ClazzAssignment");
					put(grammarAccess.getGenericClassRefAccess().getClazzAssignment_0(), "rule__GenericClassRef__ClazzAssignment_0");
					put(grammarAccess.getGenericClassRefAccess().getTypeArgAssignment_2(), "rule__GenericClassRef__TypeArgAssignment_2");
					put(grammarAccess.getNewClassRefAccess().getClazzAssignment_0_2(), "rule__NewClassRef__ClazzAssignment_0_2");
					put(grammarAccess.getNewClassRefAccess().getClazzAssignment_1_1(), "rule__NewClassRef__ClazzAssignment_1_1");
					put(grammarAccess.getTheClassRefAccess().getClazzAssignment_0_2(), "rule__TheClassRef__ClazzAssignment_0_2");
					put(grammarAccess.getTheClassRefAccess().getClazzAssignment_1_1(), "rule__TheClassRef__ClazzAssignment_1_1");
					put(grammarAccess.getTaskRefAccess().getTaskAssignment_0_1(), "rule__TaskRef__TaskAssignment_0_1");
					put(grammarAccess.getTaskRefAccess().getTaskAssignment_1(), "rule__TaskRef__TaskAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			ch.trick17.rolez.lang.ui.contentassist.antlr.internal.InternalRolezParser typedParser = (ch.trick17.rolez.lang.ui.contentassist.antlr.internal.InternalRolezParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RolezGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RolezGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
