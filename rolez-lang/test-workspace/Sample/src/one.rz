package foo

import rolez.io.PrintStream

class Person {
	val name: pure String
	val surname: pure String
	var address: readonly Address
	
	new(name: pure String, surname: pure String, address: readonly Address) {
		this.name = name;
		this.surname = surname;
		this.address = address;
		val a: pure Object = new Array[readwrite Address]("Hi".length);
		new Array[readwrite Address]("Hi".length) as pure Object;
	}
	
	def readonly fullName: readonly String {
		val n: pure Person = null;
		return "Hi";
	}
	
	def readwrite setAddress(address: readwrite Address): {
		this.address = address;
	}
	
	def readonly bar(k: int): {
		var fives: int = -555555555;
		val j: pure String = "Hi";
		
		val s: readonly String = "Hi" + 'c' + null + 5 + null + this.surname.length;
		
		for(var i: int = 0; i < 10; i += 1)
			the System.out.println("Hi, number " + i);
		
		while(fives < j.length)
			if((false && !true) || 5 < 0 + 7)
				fives = 2*fives + 2;
			else
				fives = k;
	}
}

class Student extends Person {
	val university: pure String
	
	new {
		super("John", "Doe", null);
		this.university = "ETH";
	}
	
	override readwrite setAddress(address: readwrite Address): {}
}

class Account {
	var owner: readonly Person
	var description: readonly String
}

class Address {
	var street: pure String
	var number: pure String
	var city: pure String
	var zipCode: pure String
	
	def readonly foo(a: readonly Account, b: readonly Account): {
		this.city;
		this.foo(a, new Account);
		
		val p: readwrite Person = new Person("Jim", "Dee", this);
		p.name;
		p.fullName + p.setAddress(null);
	}
}

main task Main(args: readonly Array[pure String]): {
	for(var i: int = 0; i < args.length; i += 1)
		the System.out.println("Hello " + args.get(i) + "!");
}

object Test {
	
	val a: readonly Object = new Object
	
	def pure foo: char {
		val array: readwrite Array[char] = new Array[char](5);
		array.set(0, 'H');
		array.set(1, 'e');
		array.set(2, 'l');
		array.set(3, 'l');
		array.set(4, 'o');
		array.get(new String(new Array[char](0)).length);
		
		val s: readonly String = new Account.toString.trim + new String(array);
		return s.charAt(s.hashCode - 1);
	}
	
	def pure bar: {
		the System.out.println("Hello World!");
		
		val s: readonly PrintStream = new PrintStream("out.txt");
		s.println("Good bye!");
		s.close;
		
		the System.exit(0);
	}
}